<?php

namespace Proxies\__CG__\TRC\CoreBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Fonction extends \TRC\CoreBundle\Entity\Fonction implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'id', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'dateaffectation', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'active', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'dateretrait', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'matricule', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'acteur', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'entite', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'profil', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'archive'];
        }

        return ['__isInitialized__', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'id', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'dateaffectation', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'active', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'dateretrait', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'matricule', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'acteur', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'entite', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'profil', '' . "\0" . 'TRC\\CoreBundle\\Entity\\Fonction' . "\0" . 'archive'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Fonction $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateaffectation($dateaffectation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateaffectation', [$dateaffectation]);

        return parent::setDateaffectation($dateaffectation);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateaffectation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateaffectation', []);

        return parent::getDateaffectation();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateretrait($dateretrait)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateretrait', [$dateretrait]);

        return parent::setDateretrait($dateretrait);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateretrait()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateretrait', []);

        return parent::getDateretrait();
    }

    /**
     * {@inheritDoc}
     */
    public function setActeur(\TRC\CoreBundle\Entity\Acteur $acteur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActeur', [$acteur]);

        return parent::setActeur($acteur);
    }

    /**
     * {@inheritDoc}
     */
    public function getActeur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActeur', []);

        return parent::getActeur();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntite(\TRC\CoreBundle\Entity\Entite $entite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntite', [$entite]);

        return parent::setEntite($entite);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntite', []);

        return parent::getEntite();
    }

    /**
     * {@inheritDoc}
     */
    public function setProfil(\TRC\CoreBundle\Entity\Profil $profil = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProfil', [$profil]);

        return parent::setProfil($profil);
    }

    /**
     * {@inheritDoc}
     */
    public function getProfil()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProfil', []);

        return parent::getProfil();
    }

    /**
     * {@inheritDoc}
     */
    public function setMatricule($matricule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMatricule', [$matricule]);

        return parent::setMatricule($matricule);
    }

    /**
     * {@inheritDoc}
     */
    public function getMatricule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMatricule', []);

        return parent::getMatricule();
    }

    /**
     * {@inheritDoc}
     */
    public function setDdp(\TRC\CoreBundle\Entity\DDP $ddp = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDdp', [$ddp]);

        return parent::setDdp($ddp);
    }

    /**
     * {@inheritDoc}
     */
    public function getDdp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDdp', []);

        return parent::getDdp();
    }

    /**
     * {@inheritDoc}
     */
    public function setArchive($archive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArchive', [$archive]);

        return parent::setArchive($archive);
    }

    /**
     * {@inheritDoc}
     */
    public function getArchive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArchive', []);

        return parent::getArchive();
    }

}
