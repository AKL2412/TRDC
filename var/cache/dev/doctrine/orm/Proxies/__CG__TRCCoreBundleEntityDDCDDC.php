<?php

namespace Proxies\__CG__\TRC\CoreBundle\Entity\DDC;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class DDC extends \TRC\CoreBundle\Entity\DDC\DDC implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'id', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'rs', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'rc', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'ordre', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'dossier', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'client', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'tddc', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'tdc', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'edp', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'cdcd', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'fonction', 'at'];
        }

        return ['__isInitialized__', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'id', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'rs', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'rc', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'ordre', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'dossier', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'client', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'tddc', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'tdc', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'edp', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'cdcd', '' . "\0" . 'TRC\\CoreBundle\\Entity\\DDC\\DDC' . "\0" . 'fonction', 'at'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (DDC $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function resume()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resume', []);

        return parent::resume();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setRs($rs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRs', [$rs]);

        return parent::setRs($rs);
    }

    /**
     * {@inheritDoc}
     */
    public function getRs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRs', []);

        return parent::getRs();
    }

    /**
     * {@inheritDoc}
     */
    public function setRc($rc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRc', [$rc]);

        return parent::setRc($rc);
    }

    /**
     * {@inheritDoc}
     */
    public function getRc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRc', []);

        return parent::getRc();
    }

    /**
     * {@inheritDoc}
     */
    public function setDossier($dossier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDossier', [$dossier]);

        return parent::setDossier($dossier);
    }

    /**
     * {@inheritDoc}
     */
    public function getDossier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDossier', []);

        return parent::getDossier();
    }

    /**
     * {@inheritDoc}
     */
    public function setClient(\TRC\CoreBundle\Entity\Client\Client $client = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClient', [$client]);

        return parent::setClient($client);
    }

    /**
     * {@inheritDoc}
     */
    public function getClient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClient', []);

        return parent::getClient();
    }

    /**
     * {@inheritDoc}
     */
    public function setTddc(\TRC\CoreBundle\Entity\DDC\TDDC $tddc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTddc', [$tddc]);

        return parent::setTddc($tddc);
    }

    /**
     * {@inheritDoc}
     */
    public function getTddc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTddc', []);

        return parent::getTddc();
    }

    /**
     * {@inheritDoc}
     */
    public function setTdc(\TRC\CoreBundle\Entity\DDC\TDC $tdc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTdc', [$tdc]);

        return parent::setTdc($tdc);
    }

    /**
     * {@inheritDoc}
     */
    public function getTdc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTdc', []);

        return parent::getTdc();
    }

    /**
     * {@inheritDoc}
     */
    public function setEdp(\TRC\CoreBundle\Entity\DDC\EDP $edp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEdp', [$edp]);

        return parent::setEdp($edp);
    }

    /**
     * {@inheritDoc}
     */
    public function getEdp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEdp', []);

        return parent::getEdp();
    }

    /**
     * {@inheritDoc}
     */
    public function setCdcd(\TRC\CoreBundle\Entity\DDC\CDCD $cdcd = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCdcd', [$cdcd]);

        return parent::setCdcd($cdcd);
    }

    /**
     * {@inheritDoc}
     */
    public function getCdcd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCdcd', []);

        return parent::getCdcd();
    }

    /**
     * {@inheritDoc}
     */
    public function setFonction(\TRC\CoreBundle\Entity\Fonction $fonction = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFonction', [$fonction]);

        return parent::setFonction($fonction);
    }

    /**
     * {@inheritDoc}
     */
    public function getFonction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFonction', []);

        return parent::getFonction();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrdre($ordre)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrdre', [$ordre]);

        return parent::setOrdre($ordre);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrdre()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrdre', []);

        return parent::getOrdre();
    }

    /**
     * {@inheritDoc}
     */
    public function setAt($at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAt', [$at]);

        return parent::setAt($at);
    }

    /**
     * {@inheritDoc}
     */
    public function getAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAt', []);

        return parent::getAt();
    }

}
